
from typing import Dict, Mapping, Any, Awaitable, AsyncContextManager, TypeVar
from enum import IntEnum
import asyncio

_T = TypeVar('_T')

class _AwaitableContextManager(Awaitable[_T], AsyncContextManager[_T]): ...

class ClientResponse:
    status: int
    reason: str
    headers: Mapping[str, str]
    async def json(self, encoding: str = ...) -> Any: ...
    def raise_for_status(self) -> None: ...

class WSMsgType(IntEnum):
    CONTINUATION = ...
    TEXT = ...
    BINARY = ...
    PING = ...
    PONG = ...
    CLOSE = ...
    CLOSING = ...
    CLOSED = ...
    ERROR = ...

class WSMessage:
    type: WSMsgType
    data: Any
    extra: str
    def json(self) -> Any: ...

class ClientWebSocketResponse:
    closed: bool
    async def send_str(self, data: str) -> None: ...
    async def send_bytes(self, data: bytes) -> None: ...
    async def send_json(self, data: Any) -> None: ...
    async def receive(self) -> WSMessage: ...
    async def receive_str(self) -> str: ...
    async def receive_bytes(self) -> bytes: ...
    async def receive_json(self) -> Any: ...
    async def close(self) -> None: ...

class ClientSession(AsyncContextManager):
    loop: asyncio.AbstractEventLoop
    def __init__(self, loop: asyncio.AbstractEventLoop = ...) -> None: ...
    def request(self, method: str, url: str, *, params: Any = ..., data: Any = ..., json: Any = ..., headers: Dict[str, str] = ..., timeout: float = ...) -> _AwaitableContextManager[ClientResponse]: ...
    def get(self, url: str, *, params: Any = ..., headers: Dict[str, str], timeout: float = ...) -> _AwaitableContextManager[ClientResponse]: ...
    def post(self, url: str, *, params: Any = ..., data: Any = ..., json: Any = ..., headers: Dict[str, str] = ..., timeout: float = ...) -> _AwaitableContextManager[ClientResponse]: ...
    def ws_connect(self, url: str, heartbeat: float = ...) -> _AwaitableContextManager[ClientWebSocketResponse]: ...
    def close(self) -> None: ...
